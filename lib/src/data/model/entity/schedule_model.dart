import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:mumush/src/data/network/decodable.dart';

///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class ScheduleMetaPage {
/*
{
  "total": 151,
  "last": 0,
  "number": 0,
  "size": 151
}
*/

  int? total;
  int? last;
  int? number;
  int? size;

  ScheduleMetaPage({
    this.total,
    this.last,
    this.number,
    this.size,
  });
  ScheduleMetaPage.fromJson(Map<String, dynamic> json) {
    total = int.tryParse(json['total']?.toString() ?? '');
    last = int.tryParse(json['last']?.toString() ?? '');
    number = int.tryParse(json['number']?.toString() ?? '');
    size = int.tryParse(json['size']?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['total'] = total;
    data['last'] = last;
    data['number'] = number;
    data['size'] = size;
    return data;
  }
}

class ScheduleMeta {
/*
{
  "accessor": "id",
  "page": {
    "total": 151,
    "last": 0,
    "number": 0,
    "size": 151
  }
}
*/

  String? accessor;
  ScheduleMetaPage? page;

  ScheduleMeta({
    this.accessor,
    this.page,
  });
  ScheduleMeta.fromJson(Map<String, dynamic> json) {
    accessor = json['accessor']?.toString();
    page = (json['page'] != null && (json['page'] is Map))
        ? ScheduleMetaPage.fromJson(json['page'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['accessor'] = accessor;
    if (page != null) {
      data['page'] = page!.toJson();
    }
    return data;
  }
}

class ScheduleIncludedRelationshipsPerformancesData {
/*
{
  "type": "performances",
  "id": 194
}
*/

  String? type;
  int? id;

  ScheduleIncludedRelationshipsPerformancesData({
    this.type,
    this.id,
  });

  ScheduleIncludedRelationshipsPerformancesData.fromJson(
      Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = int.tryParse(json['id']?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    return data;
  }
}

class ScheduleIncludedRelationshipsPerformances {
/*
{
  "data": {
    "type": "performances",
    "id": 194
  }
}
*/

  ScheduleIncludedRelationshipsPerformancesData? data;

  ScheduleIncludedRelationshipsPerformances({
    this.data,
  });

  ScheduleIncludedRelationshipsPerformances.fromJson(
      Map<String, dynamic> json) {
    data = (json['data'] != null && (json['data'] is Map))
        ? ScheduleIncludedRelationshipsPerformancesData.fromJson(json['data'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}

class ScheduleIncludedRelationships {
/*
{
  "performances": [
    {
      "data": {
        "type": "performances",
        "id": 194
      }
    }
  ]
}
*/

  dynamic performances;

  ScheduleIncludedRelationships({
    this.performances,
  });
  ScheduleIncludedRelationships.fromJson(Map<String, dynamic> json) {
    if (json['performances'] != null && (json['performances'] is List)) {
      final v = json['performances'];
      final arr0 = <ScheduleIncludedRelationshipsPerformances>[];
      v.forEach((v) {
        arr0.add(ScheduleIncludedRelationshipsPerformances.fromJson(v));
      });
      performances = arr0;
    } else if (json['performances'] != null) {
      final v = json['performances'];
      final ret = ScheduleIncludedRelationshipsPerformances.fromJson(v);
      performances = ret;
    } else {
      debugPrint("DEBUG ERROR: Could not deserialize json performances");
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (performances != null) {
      final v = performances;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['performances'] = arr0;
    }
    return data;
  }
}

class ScheduleIncludedAttributes {
/*
{
  "id": 11,
  "name": "Gargantua",
  "year": "2023"
}
*/

  int? id;
  String? name;
  String? year;

  ScheduleIncludedAttributes({
    this.id,
    this.name,
    this.year,
  });
  ScheduleIncludedAttributes.fromJson(Map<String, dynamic> json) {
    id = int.tryParse(json['id']?.toString() ?? '');
    name = json['name']?.toString();
    year = json['year']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['name'] = name;
    data['year'] = year;
    return data;
  }
}

class ScheduleIncluded {
/*
{
  "type": "stages",
  "id": 11,
  "attributes": {
    "id": 11,
    "name": "Gargantua",
    "year": "2023"
  },
  "relationships": {
    "performances": [
      {
        "data": {
          "type": "performances",
          "id": 194
        }
      }
    ]
  }
}
*/

  String? type;
  int? id;
  ScheduleIncludedAttributes? attributes;
  ScheduleIncludedRelationships? relationships;

  ScheduleIncluded({
    this.type,
    this.id,
    this.attributes,
    this.relationships,
  });
  ScheduleIncluded.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = int.tryParse(json['id']?.toString() ?? '');
    attributes = (json['attributes'] != null && (json['attributes'] is Map))
        ? ScheduleIncludedAttributes.fromJson(json['attributes'])
        : null;
    relationships =
        (json['relationships'] != null && (json['relationships'] is Map))
            ? ScheduleIncludedRelationships.fromJson(json['relationships'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    if (attributes != null) {
      data['attributes'] = attributes!.toJson();
    }
    if (relationships != null) {
      data['relationships'] = relationships!.toJson();
    }
    return data;
  }
}

class ScheduleDataRelationshipsArtistsData {
/*
{
  "type": "performanceDescriptions",
  "id": 4
}
*/

  String? type;
  String? id;

  ScheduleDataRelationshipsArtistsData({
    this.type,
    this.id,
  });

  ScheduleDataRelationshipsArtistsData.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = json['id']?.toString();
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    return data;
  }
}

class ScheduleDataRelationshipsArtists {
/*
{
  "data": {
    "type": "artist",
    "id": "mankind"
  }
}
*/

  ScheduleDataRelationshipsArtistsData? data;

  ScheduleDataRelationshipsArtists({
    this.data,
  });

  ScheduleDataRelationshipsArtists.fromJson(Map<String, dynamic> json) {
    data = (json['data'] != null && (json['data'] is Map))
        ? ScheduleDataRelationshipsArtistsData.fromJson(json['data'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['data'] = this.data!.toJson();
    return data;
  }
}

class ScheduleDataRelationshipsPerformanceDescriptionsData {
/*
{
  "type": "performanceDescriptions",
  "id": 48
}
*/

  String? type;
  int? id;

  ScheduleDataRelationshipsPerformanceDescriptionsData({
    this.type,
    this.id,
  });

  ScheduleDataRelationshipsPerformanceDescriptionsData.fromJson(
      Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = int.tryParse(json['id']?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    return data;
  }
}

class ScheduleDataRelationshipsPerformanceDescriptions {
/*
{
  "data": {
    "type": "performanceDescriptions",
    "id": 48
  }
}
*/

  ScheduleDataRelationshipsPerformanceDescriptionsData? data;

  ScheduleDataRelationshipsPerformanceDescriptions({
    this.data,
  });

  ScheduleDataRelationshipsPerformanceDescriptions.fromJson(
      Map<String, dynamic> json) {
    data = (json['data'] != null && (json['data'] is Map))
        ? ScheduleDataRelationshipsPerformanceDescriptionsData.fromJson(
            json['data'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}

class ScheduleDataRelationshipsDaysData {
/*
{
  "type": "days",
  "id": 6
}
*/

  String? type;
  int? id;

  ScheduleDataRelationshipsDaysData({
    this.type,
    this.id,
  });
  ScheduleDataRelationshipsDaysData.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = json['id']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    return data;
  }
}

class ScheduleDataRelationshipsDays {
/*
{
  "data": {
    "type": "days",
    "id": 6
  }
}
*/

  ScheduleDataRelationshipsDaysData? data;

  ScheduleDataRelationshipsDays({
    this.data,
  });
  ScheduleDataRelationshipsDays.fromJson(Map<String, dynamic> json) {
    data = (json['data'] != null && (json['data'] is Map))
        ? ScheduleDataRelationshipsDaysData.fromJson(json['data'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}

class ScheduleDataRelationshipsStagesData {
/*
{
  "type": "stages",
  "id": 23
}
*/

  String? type;
  int? id;

  ScheduleDataRelationshipsStagesData({
    this.type,
    this.id,
  });
  ScheduleDataRelationshipsStagesData.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = int.tryParse(json['id']?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    return data;
  }
}

class ScheduleDataRelationshipsStages {
/*
{
  "data": {
    "type": "stages",
    "id": 23
  }
}
*/

  ScheduleDataRelationshipsStagesData? data;

  ScheduleDataRelationshipsStages({
    this.data,
  });
  ScheduleDataRelationshipsStages.fromJson(Map<String, dynamic> json) {
    data = (json['data'] != null && (json['data'] is Map))
        ? ScheduleDataRelationshipsStagesData.fromJson(json['data'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['data'] = this.data!.toJson();
    return data;
  }
}

class ScheduleDataRelationships {
/*
{
  "stages": {
    "data": {
      "type": "stages",
      "id": 23
    }
  },
  "days": {
    "data": {
      "type": "days",
      "id": 6
    }
  },
  "performanceDescriptions": {
    "data": {
      "type": "performanceDescriptions",
      "id": 48
    }
  }
}
*/

  ScheduleDataRelationshipsStages? stages;
  ScheduleDataRelationshipsDays? days;
  ScheduleDataRelationshipsArtists? artists;
  ScheduleDataRelationshipsPerformanceDescriptions? performanceDescriptions;

  ScheduleDataRelationships(
      {this.stages, this.days, this.performanceDescriptions, this.artists});

  ScheduleDataRelationships.fromJson(Map<String, dynamic> json) {
    stages = (json['stages'] != null && (json['stages'] is Map))
        ? ScheduleDataRelationshipsStages.fromJson(json['stages'])
        : null;
    days = (json['days'] != null && (json['days'] is Map))
        ? ScheduleDataRelationshipsDays.fromJson(json['days'])
        : null;
    performanceDescriptions = (json['performanceDescriptions'] != null &&
            (json['performanceDescriptions'] is Map))
        ? ScheduleDataRelationshipsPerformanceDescriptions.fromJson(
            json['performanceDescriptions'])
        : null;
    artists = (json['artists'] != null && (json['artists'] is Map))
        ? ScheduleDataRelationshipsArtists.fromJson(json['artists'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (stages != null) {
      data['stages'] = stages!.toJson();
    }
    if (days != null) {
      data['days'] = days!.toJson();
    }
    if (performanceDescriptions != null) {
      data['performanceDescriptions'] = performanceDescriptions!.toJson();
    }
    if (artists != null) {
      data['artists'] = artists!.toJson();
    }
    return data;
  }
}

class ScheduleDataAttributes {
/*
{
  "id": 354,
  "start": "10:00",
  "end": "18:00",
  "activity": "Kids' activities",
  "year": "2023",
  "parallel": null
}
*/

  int? id;
  String? start;
  String? end;
  String? activity;
  String? year;
  String? parallel;

  ScheduleDataAttributes({
    this.id,
    this.start,
    this.end,
    this.activity,
    this.year,
    this.parallel,
  });
  ScheduleDataAttributes.fromJson(Map<String, dynamic> json) {
    id = int.tryParse(json['id']?.toString() ?? '');
    start = json['start']?.toString();
    end = json['end']?.toString();
    activity = json['activity']?.toString();
    year = json['year']?.toString();
    parallel = json['parallel']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['start'] = start;
    data['end'] = end;
    data['activity'] = activity;
    data['year'] = year;
    data['parallel'] = parallel;
    return data;
  }
}

class ScheduleData {
/*
{
  "type": "performances",
  "id": 354,
  "attributes": {
    "id": 354,
    "start": "10:00",
    "end": "18:00",
    "activity": "Kids' activities",
    "year": "2023",
    "parallel": null
  },
  "relationships": {
    "stages": {
      "data": {
        "type": "stages",
        "id": 23
      }
    },
    "days": {
      "data": {
        "type": "days",
        "id": 6
      }
    },
    "performanceDescriptions": {
      "data": {
        "type": "performanceDescriptions",
        "id": 48
      }
    }
  }
}
*/

  String? type;
  int? id;
  ScheduleDataAttributes? attributes;
  ScheduleDataRelationships? relationships;

  ScheduleData({
    this.type,
    this.id,
    this.attributes,
    this.relationships,
  });
  ScheduleData.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    id = int.tryParse(json['id']?.toString() ?? '');
    attributes = (json['attributes'] != null && (json['attributes'] is Map))
        ? ScheduleDataAttributes.fromJson(json['attributes'])
        : null;
    relationships =
        (json['relationships'] != null && (json['relationships'] is Map))
            ? ScheduleDataRelationships.fromJson(json['relationships'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['id'] = id;
    if (attributes != null) {
      data['attributes'] = attributes!.toJson();
    }
    if (relationships != null) {
      data['relationships'] = relationships!.toJson();
    }
    return data;
  }
}

class Schedule implements Decodable {
/*
{
  "data": [
    {
      "type": "performances",
      "id": 354,
      "attributes": {
        "id": 354,
        "start": "10:00",
        "end": "18:00",
        "activity": "Kids' activities",
        "year": "2023",
        "parallel": null
      },
      "relationships": {
        "stages": {
          "data": {
            "type": "stages",
            "id": 23
          }
        },
        "days": {
          "data": {
            "type": "days",
            "id": 6
          }
        },
        "performanceDescriptions": {
          "data": {
            "type": "performanceDescriptions",
            "id": 48
          }
        }
      }
    }
  ],
  "included": [
    {
      "type": "stages",
      "id": 11,
      "attributes": {
        "id": 11,
        "name": "Gargantua",
        "year": "2023"
      },
      "relationships": {
        "performances": [
          {
            "data": {
              "type": "performances",
              "id": 194
            }
          }
        ]
      }
    }
  ],
  "meta": {
    "accessor": "id",
    "page": {
      "total": 151,
      "last": 0,
      "number": 0,
      "size": 151
    }
  }
}
*/

  List<ScheduleData?>? data;
  List<ScheduleIncluded?>? included;
  ScheduleMeta? meta;

  Schedule({
    this.data,
    this.included,
    this.meta,
  });
  Schedule.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null && (json['data'] is List)) {
      final v = json['data'];
      final arr0 = <ScheduleData>[];
      v.forEach((v) {
        arr0.add(ScheduleData.fromJson(v));
      });
      data = arr0;
    }
    if (json['included'] != null && (json['included'] is List)) {
      final v = json['included'];
      final arr0 = <ScheduleIncluded>[];
      v.forEach((v) {
        arr0.add(ScheduleIncluded.fromJson(v));
      });
      included = arr0;
    }
    meta = (json['meta'] != null && (json['meta'] is Map))
        ? ScheduleMeta.fromJson(json['meta'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['data'] = arr0;
    }
    if (included != null) {
      final v = included;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['included'] = arr0;
    }
    if (meta != null) {
      data['meta'] = meta!.toJson();
    }
    return data;
  }

  @override
  Schedule? decode(String json) {
    var jsonMap = jsonDecode(json);
    return Schedule.fromJson(jsonMap);
  }
}
